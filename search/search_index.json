{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Guide These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics\" at the University of Zurich in Fall 2022 . Please attempt to install necessary software and packages prior to the beginning of the course. Summary If everything goes smoothly, you should be able to complete the installation in one sitting which should take about 2 hours. Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, email us at pp4rs@econ.uzh.ch so that we can update the instructions or clarify as needed. Where necessary, we have provided instructions for Mac, Windows and Linux machines. Installation Help We will provide installation help for learners struggling to setup their machines on August the 24th. Time & Location: TBA.","title":"Welcome"},{"location":"#installation-guide","text":"These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics\" at the University of Zurich in Fall 2022 . Please attempt to install necessary software and packages prior to the beginning of the course. Summary If everything goes smoothly, you should be able to complete the installation in one sitting which should take about 2 hours. Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, email us at pp4rs@econ.uzh.ch so that we can update the instructions or clarify as needed. Where necessary, we have provided instructions for Mac, Windows and Linux machines. Installation Help We will provide installation help for learners struggling to setup their machines on August the 24th. Time & Location: TBA.","title":"Installation Guide"},{"location":"acknowledgement/","text":"Acknowledgements This edition of Programming Practices is based on the previous versions of the course: 2017 edition , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler 2018 edition , by Ulrich Bergmann, Ursina Schaede, Dora Simon, Carlo Zanella & Christian Zuend 2019 Foundations edition , by Lachlan Deer & Julian Langer 2020 edition , by Ulrich Bergmann, Matteo Courthoud & Lachlan Deer 2021 edition , by Lachlan Deer, Julian Langer, Lexi Schubert, Martin Stancsics It is designed after and borrows a lot from: Effective Programming Practices for Economists , a course by Hans-Martin von Gaudecker Software Carpentry's Managing Software Research Projects lesson Data Science for Economists , a course by Grant McDermott","title":"Acknowledgements"},{"location":"acknowledgement/#acknowledgements","text":"This edition of Programming Practices is based on the previous versions of the course: 2017 edition , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler 2018 edition , by Ulrich Bergmann, Ursina Schaede, Dora Simon, Carlo Zanella & Christian Zuend 2019 Foundations edition , by Lachlan Deer & Julian Langer 2020 edition , by Ulrich Bergmann, Matteo Courthoud & Lachlan Deer 2021 edition , by Lachlan Deer, Julian Langer, Lexi Schubert, Martin Stancsics It is designed after and borrows a lot from: Effective Programming Practices for Economists , a course by Hans-Martin von Gaudecker Software Carpentry's Managing Software Research Projects lesson Data Science for Economists , a course by Grant McDermott","title":"Acknowledgements"},{"location":"citation-license/","text":"License Material is licensed under a CC-BY-SA license. Further information is available at our course homepage Suggested Citation Lachlan Deer, Julian Langer, and Martin Stancsics, 2022, Installation Guide , Programming Practices for Research in Economics, University of Zurich","title":"Citation & License"},{"location":"citation-license/#license","text":"Material is licensed under a CC-BY-SA license. Further information is available at our course homepage","title":"License"},{"location":"citation-license/#suggested-citation","text":"Lachlan Deer, Julian Langer, and Martin Stancsics, 2022, Installation Guide , Programming Practices for Research in Economics, University of Zurich","title":"Suggested Citation"},{"location":"commandLine/","text":"Command Line Tools A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text. Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi. Mac Users A command line interface comes already installed with OSX. You will need to install some other software from the terminal throughout the course, so it will be useful to install some additional \"command line tools\" now. Opening a Terminal Session To open a terminal session: Open spotlight with cmd + space Type in 'terminal' When the terminal appears, open it. Installing New Tools for the Terminal The X-code Tools We want to install 'X-code command line tools'. Copy and paste the following and press Return sudo xcode-select --install If you get a message that the command line tools are already installed, you can continue to the next step. Homebrew Package Manager Homebrew is a package manager for Mac. Install Homebrew by opening a terminal and pasting the following command: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Verify that Homebrew installed correctly, enter the following into your terminal: brew doctor And you should see the following output: Your system is ready to brew Before continuing, lets be sure everything in Homebrew is up to date by entering the following: brew upgrade brew upgrade on UZH MacOS We've seen some problems running brew upgrade on UZH computers with MacOS. If you are experiencing this, run the following two lines: sudo chown -R \"$USER\":admin/usr/local/Cellar and sudo chown -R \"$USER\":admin/usr/local/share Installing Packages with Homebrew Now we can use homebrew to easily install software. We need some basic system tools for some of the programs we will install later. In particular we need: libxml2 openssl libgit2 Most of these are already installed, but we need updates of these packages. For each of these packages enter: brew reinstall pkg-name i.e. brew reinstall libxml2 . If you get a message that the package you are trying to reinstall is not yet installed, try brew install pkg-name instead. Linking Packages to a Terminal Session We need to ensure that our terminal session has access to what we installed. To do this we add some extra lines to our bash profile (we will discuss what this means in class - do what we say for now): echo 'export PATH=\"/usr/local/opt/libxml2/bin:$PATH\"' >> ~/.zshrc echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.zshrc source .zshrc Linux & Windows Users Linux Users: Open a terminal session with Ctrl + Alt + T . Windows Users: Open the Windows Terminal as we described here Copy the following command into terminal and press Return : sudo apt-get update sudo apt-get install libcurl4-gnutls-dev librtmp-devm libfontconfig1-dev After the installation succeeded successfully repeat this one-by-one with the following two other commands: sudo apt-get install libxml2-dev sudo apt-get install libssl-dev sudo apt-get install gdebi-core Windows Users: Copy and Paste The 'traditional' Ctrl + C and Ctrl + v may not work with your terminal because the Ctrl + Key commands have a special meaning with Linux operating systems. f they don't work for you, there are two alternatives: Use the 'Linux' copy and paste commands: copy is Ctrl + Shift + C and paste is Ctrl + Shift + V . To paste text, you just do a right-click. To copy anything inside the terminal, you use highlight the text with your cursor. It is automatically copied to your clipboard.","title":"Command Line Tools"},{"location":"commandLine/#command-line-tools","text":"A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text. Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi.","title":"Command Line Tools"},{"location":"commandLine/#mac-users","text":"A command line interface comes already installed with OSX. You will need to install some other software from the terminal throughout the course, so it will be useful to install some additional \"command line tools\" now.","title":"Mac Users"},{"location":"commandLine/#opening-a-terminal-session","text":"To open a terminal session: Open spotlight with cmd + space Type in 'terminal' When the terminal appears, open it.","title":"Opening a Terminal Session"},{"location":"commandLine/#installing-new-tools-for-the-terminal","text":"","title":"Installing New Tools for the Terminal"},{"location":"commandLine/#the-x-code-tools","text":"We want to install 'X-code command line tools'. Copy and paste the following and press Return sudo xcode-select --install If you get a message that the command line tools are already installed, you can continue to the next step.","title":"The X-code Tools"},{"location":"commandLine/#homebrew-package-manager","text":"Homebrew is a package manager for Mac. Install Homebrew by opening a terminal and pasting the following command: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Verify that Homebrew installed correctly, enter the following into your terminal: brew doctor And you should see the following output: Your system is ready to brew Before continuing, lets be sure everything in Homebrew is up to date by entering the following: brew upgrade brew upgrade on UZH MacOS We've seen some problems running brew upgrade on UZH computers with MacOS. If you are experiencing this, run the following two lines: sudo chown -R \"$USER\":admin/usr/local/Cellar and sudo chown -R \"$USER\":admin/usr/local/share","title":"Homebrew Package Manager"},{"location":"commandLine/#installing-packages-with-homebrew","text":"Now we can use homebrew to easily install software. We need some basic system tools for some of the programs we will install later. In particular we need: libxml2 openssl libgit2 Most of these are already installed, but we need updates of these packages. For each of these packages enter: brew reinstall pkg-name i.e. brew reinstall libxml2 . If you get a message that the package you are trying to reinstall is not yet installed, try brew install pkg-name instead.","title":"Installing Packages with Homebrew"},{"location":"commandLine/#linking-packages-to-a-terminal-session","text":"We need to ensure that our terminal session has access to what we installed. To do this we add some extra lines to our bash profile (we will discuss what this means in class - do what we say for now): echo 'export PATH=\"/usr/local/opt/libxml2/bin:$PATH\"' >> ~/.zshrc echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.zshrc source .zshrc","title":"Linking Packages to a Terminal Session"},{"location":"commandLine/#linux-windows-users","text":"Linux Users: Open a terminal session with Ctrl + Alt + T . Windows Users: Open the Windows Terminal as we described here Copy the following command into terminal and press Return : sudo apt-get update sudo apt-get install libcurl4-gnutls-dev librtmp-devm libfontconfig1-dev After the installation succeeded successfully repeat this one-by-one with the following two other commands: sudo apt-get install libxml2-dev sudo apt-get install libssl-dev sudo apt-get install gdebi-core Windows Users: Copy and Paste The 'traditional' Ctrl + C and Ctrl + v may not work with your terminal because the Ctrl + Key commands have a special meaning with Linux operating systems. f they don't work for you, there are two alternatives: Use the 'Linux' copy and paste commands: copy is Ctrl + Shift + C and paste is Ctrl + Shift + V . To paste text, you just do a right-click. To copy anything inside the terminal, you use highlight the text with your cursor. It is automatically copied to your clipboard.","title":"Linux &amp; Windows Users"},{"location":"contact/","text":"Contact Us Questions or Comments Please contact us via email: pp4rs@econ.uzh.ch with the title \"Installation Guide: Programming Practices for Research in Economics.\" We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it. Programming Practices Team Programming Practices for Research in Economics was created by Lachlan Deer Adrian Etter Julian Langer Max Winkler at the Department of Economics, University of Zurich in 2016. This installation guide is for the 2022 edition, conducted by Martin Stanscics TBA TBA","title":"Contact Us"},{"location":"contact/#contact-us","text":"","title":"Contact Us"},{"location":"contact/#questions-or-comments","text":"Please contact us via email: pp4rs@econ.uzh.ch with the title \"Installation Guide: Programming Practices for Research in Economics.\" We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it.","title":"Questions or Comments"},{"location":"contact/#programming-practices-team","text":"Programming Practices for Research in Economics was created by Lachlan Deer Adrian Etter Julian Langer Max Winkler at the Department of Economics, University of Zurich in 2016. This installation guide is for the 2022 edition, conducted by Martin Stanscics TBA TBA","title":"Programming Practices Team"},{"location":"finish-line/","text":"Installation Guide Complete Congrats! You've made it to the end of the Installation Guide. See you in class soon!","title":"The Finish Line!"},{"location":"finish-line/#installation-guide-complete","text":"Congrats! You've made it to the end of the Installation Guide. See you in class soon!","title":"Installation Guide Complete"},{"location":"gitInstall/","text":"Installing Git and Setting Up Accounts Git is a Version Control System (VCS) that has gained a lot of traction among the programming community. We will want to use version control to keep track of the files we write, and the changes we make to them. Account Creation During the course we will show you how to use GitHub to host some of your work and do code related project management. You will need to set up an account: Please register for a GitHub account When choosing a username we recommend not using a name that includes an employer or university in case you move later on i.e. 'johnsmith' or 'johnsmith86' are OK, 'johnsmithUZH' probably not Mac Users Installing Git We will install Git using Homebrew. Enter the following lines of code into your terminal: brew install git brew link --force git Then close and reopen the terminal. Now Verify your installation . Autocompletion When we code we want to be lazy - we don't always want to write out the whole line of code we want to enter, and would prefer the computer to autocomplete our line of code for us. The default MacOS terminal doesn't have this autocompletion by default, so let's add it using our trusty friend Homebrew. Open a terminal and enter: brew install zsh-completion Activating Autocomplete on MacOS To make the autocompletion work, you will need to add a block of code to your ~./zshrc file: echo \"autoload -Uz compinit\" >> .zshrc echo \"compinit\" >> .zshrc Then source these updates (think of this as restarting your terminal) by entering the following command in your terminal: source ~/.zshrc Linux Users Git should be installed already for you. To check if it is, enter the following in a terminal: git --version If you get a bunch of numbers (ideally starting with 2.15) or higher - you are good to move on. If not, install it by entering the following into the command line: sudo apt-get install git Once complete, verify your install . Windows Users Git will be already installed inside your Ubuntu terminal. Verify this, by verifying your installation . Verifying your install To verify your installation, type the following command in a terminal and press the return key: git --version You should get an output that looks like: git version 2.25.1 Ensure that you have a version greater than 2.15.0 installed.","title":"Git"},{"location":"gitInstall/#installing-git-and-setting-up-accounts","text":"Git is a Version Control System (VCS) that has gained a lot of traction among the programming community. We will want to use version control to keep track of the files we write, and the changes we make to them.","title":"Installing Git and Setting Up Accounts"},{"location":"gitInstall/#account-creation","text":"During the course we will show you how to use GitHub to host some of your work and do code related project management. You will need to set up an account: Please register for a GitHub account When choosing a username we recommend not using a name that includes an employer or university in case you move later on i.e. 'johnsmith' or 'johnsmith86' are OK, 'johnsmithUZH' probably not","title":"Account Creation"},{"location":"gitInstall/#mac-users","text":"","title":"Mac Users"},{"location":"gitInstall/#installing-git","text":"We will install Git using Homebrew. Enter the following lines of code into your terminal: brew install git brew link --force git Then close and reopen the terminal. Now Verify your installation .","title":"Installing Git"},{"location":"gitInstall/#autocompletion","text":"When we code we want to be lazy - we don't always want to write out the whole line of code we want to enter, and would prefer the computer to autocomplete our line of code for us. The default MacOS terminal doesn't have this autocompletion by default, so let's add it using our trusty friend Homebrew. Open a terminal and enter: brew install zsh-completion Activating Autocomplete on MacOS To make the autocompletion work, you will need to add a block of code to your ~./zshrc file: echo \"autoload -Uz compinit\" >> .zshrc echo \"compinit\" >> .zshrc Then source these updates (think of this as restarting your terminal) by entering the following command in your terminal: source ~/.zshrc","title":"Autocompletion"},{"location":"gitInstall/#linux-users","text":"Git should be installed already for you. To check if it is, enter the following in a terminal: git --version If you get a bunch of numbers (ideally starting with 2.15) or higher - you are good to move on. If not, install it by entering the following into the command line: sudo apt-get install git Once complete, verify your install .","title":"Linux Users"},{"location":"gitInstall/#windows-users","text":"Git will be already installed inside your Ubuntu terminal. Verify this, by verifying your installation .","title":"Windows Users"},{"location":"gitInstall/#verifying-your-install","text":"To verify your installation, type the following command in a terminal and press the return key: git --version You should get an output that looks like: git version 2.25.1 Ensure that you have a version greater than 2.15.0 installed.","title":"Verifying your install"},{"location":"pandoc/","text":"LaTeX LaTeX is a document preparation system for high-quality typesetting most often used for medium-to-large technical or scientific documents. Most of you probably have some familiarity with LaTeX from your Master's Theses. We may want to build some PDF documents throughout the course using LaTeX - so let's install it. LaTeX Install for Mac We again install from Homebrew. Enter the following into the terminal: brew install --cask mactex LaTeX Install for Linux & Windows LaTeX can be installed from the terminal by entering the following command and pressing Return : sudo apt-get install texlive-latex-extra Check everything went according to plan: tex --version which gives the following output: TeX 3.141592653 (TeX Live 2021) kpathsea version 6.3.3 Copyright 2021 D.E. Knuth. There is NO warranty. Redistribution of this software is covered by the terms of both the TeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the TeX source. Primary author of TeX: D.E. Knuth. Pandoc Pandoc is an extremely useful 'swiss army knife' for converting between different types of markup languages from the command line. For example, it readily builds PDFs with latex, and markdown - both of which are heavily used in academic research. Note We do not actively teach how to use Pandoc in the course - but we will utilize it in some lessons where we produce PDF, Word or HTML output from plain text files. Pandoc Install for Linux & Windows Open a terminal window and type sudo apt install pandoc to install pandoc from the command line Pandoc Install for Mac In a terminal window and type: brew install pandoc Now verify your install . Verify Pandoc Install Verify your install by typing the following into a command line: pandoc --version The expected output starts with the following information: pandoc 2.x Ensure you have at least version 2.1.1 installed.","title":"LaTeX & Pandoc"},{"location":"pandoc/#latex","text":"LaTeX is a document preparation system for high-quality typesetting most often used for medium-to-large technical or scientific documents. Most of you probably have some familiarity with LaTeX from your Master's Theses. We may want to build some PDF documents throughout the course using LaTeX - so let's install it.","title":"LaTeX"},{"location":"pandoc/#latex-install-for-mac","text":"We again install from Homebrew. Enter the following into the terminal: brew install --cask mactex","title":"LaTeX Install for Mac"},{"location":"pandoc/#latex-install-for-linux-windows","text":"LaTeX can be installed from the terminal by entering the following command and pressing Return : sudo apt-get install texlive-latex-extra Check everything went according to plan: tex --version which gives the following output: TeX 3.141592653 (TeX Live 2021) kpathsea version 6.3.3 Copyright 2021 D.E. Knuth. There is NO warranty. Redistribution of this software is covered by the terms of both the TeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the TeX source. Primary author of TeX: D.E. Knuth.","title":"LaTeX Install for Linux &amp; Windows"},{"location":"pandoc/#pandoc","text":"Pandoc is an extremely useful 'swiss army knife' for converting between different types of markup languages from the command line. For example, it readily builds PDFs with latex, and markdown - both of which are heavily used in academic research. Note We do not actively teach how to use Pandoc in the course - but we will utilize it in some lessons where we produce PDF, Word or HTML output from plain text files.","title":"Pandoc"},{"location":"pandoc/#pandoc-install-for-linux-windows","text":"Open a terminal window and type sudo apt install pandoc to install pandoc from the command line","title":"Pandoc Install for Linux &amp; Windows"},{"location":"pandoc/#pandoc-install-for-mac","text":"In a terminal window and type: brew install pandoc Now verify your install .","title":"Pandoc Install for Mac"},{"location":"pandoc/#verify-pandoc-install","text":"Verify your install by typing the following into a command line: pandoc --version The expected output starts with the following information: pandoc 2.x Ensure you have at least version 2.1.1 installed.","title":"Verify Pandoc Install"},{"location":"path-setting/","text":"Making Path Settings Permanent For our workflow be be command line driven, we need to be able to call software from the command line. Whilst much of the software we have installed as automatically made this possible, it is not universally the case. Here we will make the extra few changes we need to complete the installation guide. Windows Users (for Windows 8 and 10) You will need local administration rights for your computer, but you should have these on your personal computers or ones owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select \"Path\" from the list of system variables. Choose \u201cEdit\u201d and append (i.e., do not overwrite the previous value): ;C:\\Path\\to\\program.exe to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and the text. Click on OK as often as needed. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, with your relevant username should work: ;C:\\Users\\ldeer\\AppData\\Local\\atom\\bin ;C:\\Program Files\\Git\\bin ;C:\\Program Files\\R\\R-3.X.X\\bin ; Mac Users (Slight Modifications for Linux Users) You will need to add a line to the file \".bash_profile\" or potentially create the file if it didn't already exist. This file lives in your home directory and it is hidden from your view by default. We now provide a guide of how to create / adjust this file using a tiny editor called nano, if you are familiar with editing text files, just use your editor of choice. Open a Terminal and type: nano ~/.bash_profile If .bash_profile already existed, you will see some text at this point. If so, use the arrow keys to scroll all the way to the bottom of the file. Add the following line at the end of the file: export PATH=\"${PATH}:/path/to/program/inside/package\" for each program we need to make accessible. For example to make matlab accessible from the command line: export PATH=\"${PATH}:/Applications/MATLAB_R2016a.app/bin/matlab Please do this for the following software: Sublime Text Git Matlab R Once you have finished, press Return and then ctrl+o (= WriteOut = save) and Return once more. Your default locale settings may conflict with some of the programs we'll need. If you want to be on the safe side, add these lines to your .bash_profile file: export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8 Thanks for Hans-Martin von Gaudecker, and in turn Matthias Bannert for the tip on locale settings. Linux users : For most distributions, everything here applies to the file .bashrc instead of .bash_profile. The End Well done - it's time for a beer, or some other cold beverage to celebrate completing this guide.","title":"Making Path Settings Permanent"},{"location":"path-setting/#making-path-settings-permanent","text":"For our workflow be be command line driven, we need to be able to call software from the command line. Whilst much of the software we have installed as automatically made this possible, it is not universally the case. Here we will make the extra few changes we need to complete the installation guide.","title":"Making Path Settings Permanent"},{"location":"path-setting/#windows-users-for-windows-8-and-10","text":"You will need local administration rights for your computer, but you should have these on your personal computers or ones owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select \"Path\" from the list of system variables. Choose \u201cEdit\u201d and append (i.e., do not overwrite the previous value): ;C:\\Path\\to\\program.exe to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and the text. Click on OK as often as needed. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, with your relevant username should work: ;C:\\Users\\ldeer\\AppData\\Local\\atom\\bin ;C:\\Program Files\\Git\\bin ;C:\\Program Files\\R\\R-3.X.X\\bin ;","title":"Windows Users (for Windows 8 and 10)"},{"location":"path-setting/#mac-users-slight-modifications-for-linux-users","text":"You will need to add a line to the file \".bash_profile\" or potentially create the file if it didn't already exist. This file lives in your home directory and it is hidden from your view by default. We now provide a guide of how to create / adjust this file using a tiny editor called nano, if you are familiar with editing text files, just use your editor of choice. Open a Terminal and type: nano ~/.bash_profile If .bash_profile already existed, you will see some text at this point. If so, use the arrow keys to scroll all the way to the bottom of the file. Add the following line at the end of the file: export PATH=\"${PATH}:/path/to/program/inside/package\" for each program we need to make accessible. For example to make matlab accessible from the command line: export PATH=\"${PATH}:/Applications/MATLAB_R2016a.app/bin/matlab Please do this for the following software: Sublime Text Git Matlab R Once you have finished, press Return and then ctrl+o (= WriteOut = save) and Return once more. Your default locale settings may conflict with some of the programs we'll need. If you want to be on the safe side, add these lines to your .bash_profile file: export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8 Thanks for Hans-Martin von Gaudecker, and in turn Matthias Bannert for the tip on locale settings. Linux users : For most distributions, everything here applies to the file .bashrc instead of .bash_profile.","title":"Mac Users (Slight Modifications for Linux Users)"},{"location":"path-setting/#the-end","text":"Well done - it's time for a beer, or some other cold beverage to celebrate completing this guide.","title":"The End"},{"location":"python-more/","text":"Additional Python packages Miniforge is a very streamlined Python Distribution containing only the most necessary packages. In addition to these, there are many other packages we need to do scientific computing. We will install those in this section of the guide. Note Miniforge (also Mambaforge, Miniconda) is based on the Anaconda Python Distribution, which includes a large number of packages related to scientific computing by default. However, it also means, that it is rather large, and many of those packages are of no interest to most economists. (If you're interested in all the packages included, click here and go to the Python 3.9 tab.) For this reason, start from a barebones distribution and only install what we require instead. The following recipe works for all operating systems. There are a multitude of package management tools that work with Python packages. In this course, we use conda , which is the default one for Anaconda-based Python distributions. It combines dependency management and virtual environments in one program. Furthermore, it is designed with the scientific workflow in mind. For those packages that are not available in the conda repositories, we fall back to pip , Python's standard package manager. Note Mixing conda and pip is generally advised against, but sometimes it cannot be avoided. However, by using conda first and pip second, and utilizing virtual environments, you are mostly safe. You can find more info here . First let us update conda by typing the following into the terminal conda update conda --yes Next, install a handful of packages using the following command conda install jupyter jupyterlab nb_conda_kernels Press enter to accept the proposed package plan. This command installs those four packages into the default (base) environment. It is fine, as we would like those to be shared across all environments we later create. However, it is generally not the case, as we want dependencies for our different projects well separated. For example, packages for this course should be wholly independent from packages you are using to write a paper. The next command creates a conda environment called pp4rs and installs all the packages required for the course. conda env create -f https://pp4rs.github.io/2022-uzh-installation-guide/assets/pp4rs-env.yml Generally, you should have such a file for each of your projects in order to easily reproduce the environment it was built in any time in the future. Note You can find more info on how to create such environment specifications here Now it is time to test your Python installation. Type into your shell the following conda activate pp4rs conda list It should return a list will all of the packages that are installed in the pp4rs environment. In order to use them, you will need to activate this environment in the beginning of every new shell session. Note If you are using a computer with an Intel processor and want every ounce of performance for linear algebra operations, you might want to tell conda to use Intel's matrix algebra algorithms instead of the default open source ones. In order to do that, you simply have to install a quasi-package the following way conda install blas=*=*mkl --name pp4rs The performance boost is not huge, though.","title":"Python Extras"},{"location":"python-more/#additional-python-packages","text":"Miniforge is a very streamlined Python Distribution containing only the most necessary packages. In addition to these, there are many other packages we need to do scientific computing. We will install those in this section of the guide. Note Miniforge (also Mambaforge, Miniconda) is based on the Anaconda Python Distribution, which includes a large number of packages related to scientific computing by default. However, it also means, that it is rather large, and many of those packages are of no interest to most economists. (If you're interested in all the packages included, click here and go to the Python 3.9 tab.) For this reason, start from a barebones distribution and only install what we require instead. The following recipe works for all operating systems. There are a multitude of package management tools that work with Python packages. In this course, we use conda , which is the default one for Anaconda-based Python distributions. It combines dependency management and virtual environments in one program. Furthermore, it is designed with the scientific workflow in mind. For those packages that are not available in the conda repositories, we fall back to pip , Python's standard package manager. Note Mixing conda and pip is generally advised against, but sometimes it cannot be avoided. However, by using conda first and pip second, and utilizing virtual environments, you are mostly safe. You can find more info here . First let us update conda by typing the following into the terminal conda update conda --yes Next, install a handful of packages using the following command conda install jupyter jupyterlab nb_conda_kernels Press enter to accept the proposed package plan. This command installs those four packages into the default (base) environment. It is fine, as we would like those to be shared across all environments we later create. However, it is generally not the case, as we want dependencies for our different projects well separated. For example, packages for this course should be wholly independent from packages you are using to write a paper. The next command creates a conda environment called pp4rs and installs all the packages required for the course. conda env create -f https://pp4rs.github.io/2022-uzh-installation-guide/assets/pp4rs-env.yml Generally, you should have such a file for each of your projects in order to easily reproduce the environment it was built in any time in the future. Note You can find more info on how to create such environment specifications here Now it is time to test your Python installation. Type into your shell the following conda activate pp4rs conda list It should return a list will all of the packages that are installed in the pp4rs environment. In order to use them, you will need to activate this environment in the beginning of every new shell session. Note If you are using a computer with an Intel processor and want every ounce of performance for linear algebra operations, you might want to tell conda to use Intel's matrix algebra algorithms instead of the default open source ones. In order to do that, you simply have to install a quasi-package the following way conda install blas=*=*mkl --name pp4rs The performance boost is not huge, though.","title":"Additional Python packages"},{"location":"python/","text":"Anaconda Python Anaconda is a pre-packaged Python distribution for scientific users. Unlike other Python distributions, this means that most additional functionality that we need to do numerical computing, statistics, plotting and the like come already installed - which saves us a lot of time. Installing Miniforge Python for Mac Install using Homebrew. In your terminal type the following and press return: brew install --cask miniforge During the installation process you might be the following output asking you to review the license agreement: Welcome to Anaconda3 In order to continue the installation process, please review the license agreement. Please, press ENTER to continue >>> ... Do you approve the license terms? [yes|no] Press Return until you reach the end, and type 'yes'. Now proceed to verify your install Installing Miniforge Python for Linux and Windows First, we need to download the Anaconda Bash Script (a file that will install things for us). Enter the following into the terminal: curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" Run the Anaconda Script by entering the following into the terminal: bash Miniforge3-$(uname)-$(uname -m).sh As this script runs through, review and accept the license agreement. To do this press Return until you reach the end, and type 'yes'. After you agree to the license, you will be prompted to choose the location of the installation: Miniforge3 will now be installed into this location: /home/lachlan/miniforge3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [/home/lachlan/miniforge3] >>> Use the default. The installation will continue - it does take some time, so be patient. Once the installation is complete, you will get the following output, which asks a question of us: ... Preparing transaction: done Executing transaction: done installation finished. Do you wish the installer to initialize Miniforge3 by running conda init? [yes|no] Type 'yes'. Now we need to refresh our terminal settings, so type the following and press return: source ~/.bashrc Now proceed to verify your install . Updating the Anaconda Install The above procedure will always install the latest available Miiforge distribution for your platform. If you want to update an existing installation, you can generally do that using the command conda updade --all , which updates all packages in a given environment (including conda itself). Verifying Your Installation In order to activate Miniforge's environment, we have to start with conda activate Then, to verify that the correct version of Python has been installed, usually we would follow the programName --version logic from before. python --version which yields: Python 3.9.13 which tells us that Python is installed. But, because most operating systems these days have some additional version of Python installed, this doesn't guarantee that the Miniforge version is available for us to use from the terminal. To check, initiate Python by entering the following into a terminal and pressing Return : python You should now see something like: Python 3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) [GCC 10.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. where the operating system name should be different for Mac users. Now we see that the terminal is using the Miniforge (conda-forge) version as we wanted. To quit the Python session we just opened, type the following at the >>> : >>> quit() and you will return to your terminal. This was successful if you now see a $ rather than the >>> . If you want to deactivate the Miniforge environment (e.g. so that you can use the system's Python interpreter), you simply have to type conda deactivate","title":"Python"},{"location":"python/#anaconda-python","text":"Anaconda is a pre-packaged Python distribution for scientific users. Unlike other Python distributions, this means that most additional functionality that we need to do numerical computing, statistics, plotting and the like come already installed - which saves us a lot of time.","title":"Anaconda Python"},{"location":"python/#installing-miniforge-python-for-mac","text":"Install using Homebrew. In your terminal type the following and press return: brew install --cask miniforge During the installation process you might be the following output asking you to review the license agreement: Welcome to Anaconda3 In order to continue the installation process, please review the license agreement. Please, press ENTER to continue >>> ... Do you approve the license terms? [yes|no] Press Return until you reach the end, and type 'yes'. Now proceed to verify your install","title":"Installing Miniforge Python for Mac"},{"location":"python/#installing-miniforge-python-for-linux-and-windows","text":"First, we need to download the Anaconda Bash Script (a file that will install things for us). Enter the following into the terminal: curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" Run the Anaconda Script by entering the following into the terminal: bash Miniforge3-$(uname)-$(uname -m).sh As this script runs through, review and accept the license agreement. To do this press Return until you reach the end, and type 'yes'. After you agree to the license, you will be prompted to choose the location of the installation: Miniforge3 will now be installed into this location: /home/lachlan/miniforge3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [/home/lachlan/miniforge3] >>> Use the default. The installation will continue - it does take some time, so be patient. Once the installation is complete, you will get the following output, which asks a question of us: ... Preparing transaction: done Executing transaction: done installation finished. Do you wish the installer to initialize Miniforge3 by running conda init? [yes|no] Type 'yes'. Now we need to refresh our terminal settings, so type the following and press return: source ~/.bashrc Now proceed to verify your install . Updating the Anaconda Install The above procedure will always install the latest available Miiforge distribution for your platform. If you want to update an existing installation, you can generally do that using the command conda updade --all , which updates all packages in a given environment (including conda itself).","title":"Installing Miniforge Python for Linux and Windows"},{"location":"python/#verifying-your-installation","text":"In order to activate Miniforge's environment, we have to start with conda activate Then, to verify that the correct version of Python has been installed, usually we would follow the programName --version logic from before. python --version which yields: Python 3.9.13 which tells us that Python is installed. But, because most operating systems these days have some additional version of Python installed, this doesn't guarantee that the Miniforge version is available for us to use from the terminal. To check, initiate Python by entering the following into a terminal and pressing Return : python You should now see something like: Python 3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) [GCC 10.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. where the operating system name should be different for Mac users. Now we see that the terminal is using the Miniforge (conda-forge) version as we wanted. To quit the Python session we just opened, type the following at the >>> : >>> quit() and you will return to your terminal. This was successful if you now see a $ rather than the >>> . If you want to deactivate the Miniforge environment (e.g. so that you can use the system's Python interpreter), you simply have to type conda deactivate","title":"Verifying Your Installation"},{"location":"r-packages/","text":"Additional R Packages We will need some additional libraries to conduct our statistical analysis. All Users Proceed as follows: Open RStudio In the console , copy and paste the following: to_install <-c( \"reshape\", \"rmarkdown\", \"plm\", \"Hmisc\", \"sandwich\", \"Ecdat\", \"knitr\", \"httr\", \"xml2\", \"xtable\",\"tidyverse\", \"AER\", \"rdd\", \"car\", \"aod\", \"lmtest\", \"fixest\", \"nlme\", \"lme4\", \"multiwayvcov\", \"lubridate\", \"haven\", \"ivpack\", \"readxl\", \"ggrepel\", \"dbplyr\", \"remotes\", \"rticles\", \"here\", \"optparse\", \"rlist\" ) install.packages(to_install) If you are asked if you want to install packages that need compilation, type y followed by Return to confirm this. Wait until all the packages have been installed and the you are done. It may take a while, so be patient Note that many dependencies get installed along the way. We also want some packages to be installed from Github - these typically still under development: from_gh <- c(\"ddsjoberg/gtsummary\", \"vincentarelbundock/modelsummary\", \"rstudio/fontawesome\", \"rstudio/gt\", \"rstudio/renv\" ) remotes::install_github(from_gh) Package List May Update This list of packages may be updated during the course. There has been a raft of new, easier to use packages for some tools that we will introduce. Before we list them here, we want to test them out a little more rigorously. Check back here before Week 3 of the course to see if there are changes.","title":"R Packages"},{"location":"r-packages/#additional-r-packages","text":"We will need some additional libraries to conduct our statistical analysis.","title":"Additional R Packages"},{"location":"r-packages/#all-users","text":"Proceed as follows: Open RStudio In the console , copy and paste the following: to_install <-c( \"reshape\", \"rmarkdown\", \"plm\", \"Hmisc\", \"sandwich\", \"Ecdat\", \"knitr\", \"httr\", \"xml2\", \"xtable\",\"tidyverse\", \"AER\", \"rdd\", \"car\", \"aod\", \"lmtest\", \"fixest\", \"nlme\", \"lme4\", \"multiwayvcov\", \"lubridate\", \"haven\", \"ivpack\", \"readxl\", \"ggrepel\", \"dbplyr\", \"remotes\", \"rticles\", \"here\", \"optparse\", \"rlist\" ) install.packages(to_install) If you are asked if you want to install packages that need compilation, type y followed by Return to confirm this. Wait until all the packages have been installed and the you are done. It may take a while, so be patient Note that many dependencies get installed along the way. We also want some packages to be installed from Github - these typically still under development: from_gh <- c(\"ddsjoberg/gtsummary\", \"vincentarelbundock/modelsummary\", \"rstudio/fontawesome\", \"rstudio/gt\", \"rstudio/renv\" ) remotes::install_github(from_gh) Package List May Update This list of packages may be updated during the course. There has been a raft of new, easier to use packages for some tools that we will introduce. Before we list them here, we want to test them out a little more rigorously. Check back here before Week 3 of the course to see if there are changes.","title":"All Users"},{"location":"r/","text":"R R is a language for statistical computing and graphics. R's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata. Installing R for Mac Users Go to the R homepage and download the installer for your operating system. The current version for Mac and Windows is R version 4.2.1 . Once you have installed R, verify your install . Why Not Install via Homebrew? There are conflicting views on Homebrew's installation of R . Because we haven't tried it to ensure no problems will emerge, we recommend going with the installation based on the CRAN distributed package. Installing R for Linux & Windows Users First, we need to add a repository so that our operating system knows where to install the most recent version of R from. Enter the following into the terminal and press Return : wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc sudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\" Now, update to get the package manifests from the new repository: sudo apt-get update We can now install R as from the terminal by entering the following: sudo apt-get install r-base r-base-dev Install the multi-threaded OpenBlas library to get higher performance for linear algebra operations: sudo apt-get install libopenblas-base Now, verify your install . R on WSL Ubuntu vs. R on native Windows Even if you already have a version of R installed on your Windows machine, you need to install R inside the WSL Ubuntu environment we have set up. Your Ubuntu terminal cannot see everything you have on your native Windows installation. Verifying your Install of R - All Users Open a terminal and enter: R --version followed by pressing Return . The expected return begins with: R version 4.2.x (2022-xx-xx) -- \"Some Funky Name\"","title":"R"},{"location":"r/#r","text":"R is a language for statistical computing and graphics. R's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata.","title":"R"},{"location":"r/#installing-r-for-mac-users","text":"Go to the R homepage and download the installer for your operating system. The current version for Mac and Windows is R version 4.2.1 . Once you have installed R, verify your install . Why Not Install via Homebrew? There are conflicting views on Homebrew's installation of R . Because we haven't tried it to ensure no problems will emerge, we recommend going with the installation based on the CRAN distributed package.","title":"Installing R for Mac Users"},{"location":"r/#installing-r-for-linux-windows-users","text":"First, we need to add a repository so that our operating system knows where to install the most recent version of R from. Enter the following into the terminal and press Return : wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc sudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\" Now, update to get the package manifests from the new repository: sudo apt-get update We can now install R as from the terminal by entering the following: sudo apt-get install r-base r-base-dev Install the multi-threaded OpenBlas library to get higher performance for linear algebra operations: sudo apt-get install libopenblas-base Now, verify your install . R on WSL Ubuntu vs. R on native Windows Even if you already have a version of R installed on your Windows machine, you need to install R inside the WSL Ubuntu environment we have set up. Your Ubuntu terminal cannot see everything you have on your native Windows installation.","title":"Installing R for Linux &amp; Windows Users"},{"location":"r/#verifying-your-install-of-r-all-users","text":"Open a terminal and enter: R --version followed by pressing Return . The expected return begins with: R version 4.2.x (2022-xx-xx) -- \"Some Funky Name\"","title":"Verifying your Install of R - All Users"},{"location":"rstudio/","text":"RStudio RStudio provides an easy to work with graphical interface to R, and its format should feel familiar to Stata and Matlab users. Installing RStudio for Mac Users We can install RStudio with Homebrew: brew install --cask rstudio To see if it installed correctly, try and open RStudio from spotlight - there's not simple verification from the terminal. Installing RStudio for Linux Users Download the Latest Version of RStudio: wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-2022.02.3-492-amd64.deb Install it: sudo gdebi rstudio-2022.02.3-492-amd64.deb To see if it installed correctly, try and open RStudio from the GNOME menu - there's no simple verification from the terminal. Installing RStudio for Windows Users Download the most recent version of RStudio Server for Ubuntu 18/20 (see here ). Enter the following into your terminal and press Return : wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-2022.02.3-492-amd64.deb Now install it by entering this command and hitting Return : sudo gdebi rstudio-server-2022.02.3-492-amd64.deb Now that we have RStudio installed on our subsystem, how can we use it? In the Ubuntu terminal enter the following text and press Return : sudo rstudio-server start Now open a web browser, and go to the following address: http://localhost:8787/ which will take you to a log in page. Log in using the username and password for your Ubuntu terminal that we set up at the beginning. After logging in successfully you have access to the RStudio that you installed in your Ubuntu subsystem. To log out, click on the log out button in the top right corner. To stop the RStudio server from running (logging out doesn't stop it), enter sudo rstudio stop into your terminal. Why RStudio Server? We are using RStudio server rather then the desktop version of RStudio because we have found it the easiest way to interact with the R installation inside the WSL system.","title":"RStudio"},{"location":"rstudio/#rstudio","text":"RStudio provides an easy to work with graphical interface to R, and its format should feel familiar to Stata and Matlab users.","title":"RStudio"},{"location":"rstudio/#installing-rstudio-for-mac-users","text":"We can install RStudio with Homebrew: brew install --cask rstudio To see if it installed correctly, try and open RStudio from spotlight - there's not simple verification from the terminal.","title":"Installing RStudio for Mac Users"},{"location":"rstudio/#installing-rstudio-for-linux-users","text":"Download the Latest Version of RStudio: wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-2022.02.3-492-amd64.deb Install it: sudo gdebi rstudio-2022.02.3-492-amd64.deb To see if it installed correctly, try and open RStudio from the GNOME menu - there's no simple verification from the terminal.","title":"Installing RStudio for Linux Users"},{"location":"rstudio/#installing-rstudio-for-windows-users","text":"Download the most recent version of RStudio Server for Ubuntu 18/20 (see here ). Enter the following into your terminal and press Return : wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-2022.02.3-492-amd64.deb Now install it by entering this command and hitting Return : sudo gdebi rstudio-server-2022.02.3-492-amd64.deb Now that we have RStudio installed on our subsystem, how can we use it? In the Ubuntu terminal enter the following text and press Return : sudo rstudio-server start Now open a web browser, and go to the following address: http://localhost:8787/ which will take you to a log in page. Log in using the username and password for your Ubuntu terminal that we set up at the beginning. After logging in successfully you have access to the RStudio that you installed in your Ubuntu subsystem. To log out, click on the log out button in the top right corner. To stop the RStudio server from running (logging out doesn't stop it), enter sudo rstudio stop into your terminal. Why RStudio Server? We are using RStudio server rather then the desktop version of RStudio because we have found it the easiest way to interact with the R installation inside the WSL system.","title":"Installing RStudio for Windows Users"},{"location":"snakemake/","text":"Snakemake Snakemake is an easy to use workflow management system. It will allow us to control the execution of a set scripts by by running them from the command line. We will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible. Snakemake is a python package - so we can install using the default python installer, pip. All Users In a terminal window enter the command: pip install snakemake followed by pressing the Return key. Verify that your installation worked correctly by entering snakemake --version into a terminal and pressing Return. The expected output is the current version on the software, which should be greater than 6.7.0 --version on MacOS We have reports that snakemake --version does not print anything to screen on some Mac installations. If this happens to you, for now don't worry about it.","title":"Snakemake"},{"location":"snakemake/#snakemake","text":"Snakemake is an easy to use workflow management system. It will allow us to control the execution of a set scripts by by running them from the command line. We will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible. Snakemake is a python package - so we can install using the default python installer, pip.","title":"Snakemake"},{"location":"snakemake/#all-users","text":"In a terminal window enter the command: pip install snakemake followed by pressing the Return key. Verify that your installation worked correctly by entering snakemake --version into a terminal and pressing Return. The expected output is the current version on the software, which should be greater than 6.7.0 --version on MacOS We have reports that snakemake --version does not print anything to screen on some Mac installations. If this happens to you, for now don't worry about it.","title":"All Users"},{"location":"textEditor/","text":"Motivation A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into a specific program are generally are not a satisfying option (we will find certain cases where you may want to use them). There is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before! We should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own. Note None of the skills we learn in the course are tied to VS Code, so if you do decide to move away to another editor, nothing will be lost. VS Code VS Code is a relatively new text editor that works across all three platforms: Linux, Windows and Mac. In a short time it has already become one of most used text editors and we hope you will soon see why. It is built by Microsoft, but is open source, i.e. everyone can see and modify the program's internal code - so it is less nasty on the consciousness than some of Microsoft's traditional products. The main advantages for us are that it includes support for debugging, embedded Git control and GitHub, syntax highlighting, intelligent code completion, and many useful plugins - all of which make our lives much easier. Installing VS Code on Mac VS Code can be installed using homebrew. Type the following into your terminal and hit return: brew install --cask visual-studio-code Once it has been installed, verify your install by following the instructions below . Installing VS Code on Ubuntu VS Code is available to install via snap. Enter the following in your terminal and press Return : snap install code --classic Once it has been installed, verify your install by following the instructions below . Installing VS Code on Windows Go to the VS Code download page , and download the Installer for Windows. Once downloaded double click to install. Accept any default options. At the end of the install, launch VS Code (it gives you this option on the last window). Windows Defender Firewall You will likely get the following pop-up during the above process: Click 'Allow access' if you do. Verifying Your Install After you have installed software via the terminal, we often want to verify the install was successful. For most programs we do this by typing the program name followed by --version in to the terminal. Let's do it: code --version which should yield output like: 1.59.0 379476f0e13988d90fab105c5c19e7abc8b1dea8 x64 if successful. Installing Extensions for VS Code VS Code is great straight of the box, but gets even better when we add some additional extensions to make our life easier. To add extensions: Open VS Code Press Ctrl + Shift + X to open the Extensions side bar (it opens on the left). Add extensions by: Searching for them in the Marketplace When you find them, click Install We recommend (but don't require) the following extensions to be added for this course: Bracket Pair Colorizer 2 Code Spell Checker Git History GitLens Markdown All in One Markdown Preview Enhanced Project Manager Python R vscode-icons vscode-pdf Whitespacer","title":"Text Editor"},{"location":"textEditor/#motivation","text":"A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into a specific program are generally are not a satisfying option (we will find certain cases where you may want to use them). There is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before! We should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own. Note None of the skills we learn in the course are tied to VS Code, so if you do decide to move away to another editor, nothing will be lost.","title":"Motivation"},{"location":"textEditor/#vs-code","text":"VS Code is a relatively new text editor that works across all three platforms: Linux, Windows and Mac. In a short time it has already become one of most used text editors and we hope you will soon see why. It is built by Microsoft, but is open source, i.e. everyone can see and modify the program's internal code - so it is less nasty on the consciousness than some of Microsoft's traditional products. The main advantages for us are that it includes support for debugging, embedded Git control and GitHub, syntax highlighting, intelligent code completion, and many useful plugins - all of which make our lives much easier.","title":"VS Code"},{"location":"textEditor/#installing-vs-code-on-mac","text":"VS Code can be installed using homebrew. Type the following into your terminal and hit return: brew install --cask visual-studio-code Once it has been installed, verify your install by following the instructions below .","title":"Installing VS Code on Mac"},{"location":"textEditor/#installing-vs-code-on-ubuntu","text":"VS Code is available to install via snap. Enter the following in your terminal and press Return : snap install code --classic Once it has been installed, verify your install by following the instructions below .","title":"Installing VS Code on Ubuntu"},{"location":"textEditor/#installing-vs-code-on-windows","text":"Go to the VS Code download page , and download the Installer for Windows. Once downloaded double click to install. Accept any default options. At the end of the install, launch VS Code (it gives you this option on the last window). Windows Defender Firewall You will likely get the following pop-up during the above process: Click 'Allow access' if you do.","title":"Installing VS Code on Windows"},{"location":"textEditor/#verifying-your-install","text":"After you have installed software via the terminal, we often want to verify the install was successful. For most programs we do this by typing the program name followed by --version in to the terminal. Let's do it: code --version which should yield output like: 1.59.0 379476f0e13988d90fab105c5c19e7abc8b1dea8 x64 if successful.","title":"Verifying Your Install"},{"location":"textEditor/#installing-extensions-for-vs-code","text":"VS Code is great straight of the box, but gets even better when we add some additional extensions to make our life easier. To add extensions: Open VS Code Press Ctrl + Shift + X to open the Extensions side bar (it opens on the left). Add extensions by: Searching for them in the Marketplace When you find them, click Install We recommend (but don't require) the following extensions to be added for this course: Bracket Pair Colorizer 2 Code Spell Checker Git History GitLens Markdown All in One Markdown Preview Enhanced Project Manager Python R vscode-icons vscode-pdf Whitespacer","title":"Installing Extensions for VS Code"},{"location":"updates/","text":"Previous Versions of the Installation Guide Our installation guide is updated periodically to reflect changes in course content, and changes ways to install certain programs and packages. Here are the links to previous versions of the Installation Guide: 2017 edition , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler 2018 edition , by Ulrich Bergmann, Ursina Schaede, Dora Simon, Carlo Zanella & Christian Zuend 2019 Foundations edition , by Lachlan Deer & Julian Langer 2020 edition , by Ulrich Bergmann, Matteo Courthoud & Lachlan Deer 2021 edition , by Lachlan Deer, Julian Langer, Lexi Schubert & Martin Stancsics Major Changes v2022 Switch from the Anaconda to Miniforge to have a leaner Python distribution Use a separated conda environment for the course instead of the base environment Switch from vcxsrv to GWSL as it's more user-friendly Obtain Chromedriver through chromedriver_autoinstaller v2021.0.1 Update package versions for all Operating Systems Mac instructions using zsh rather than bash WSL instructions compliant with WSL2 Uses Google Chrome and Chromedriver from WSL for webscraping via an xserver v2020 Migrate from Cygwin to Windows Subsystem for Linux Higher dependency on Homebrew to install packages for Mac Emphasis on installation using terminal commands rather than graphical installers to enhance reproducibility Remove GIS guide Split's installation instructions of R, RStudio and additional R packaged into separate versions 2019 Foundations edition Focus only on R, terminal, Git and snakemake","title":"News & Updates"},{"location":"updates/#previous-versions-of-the-installation-guide","text":"Our installation guide is updated periodically to reflect changes in course content, and changes ways to install certain programs and packages. Here are the links to previous versions of the Installation Guide: 2017 edition , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler 2018 edition , by Ulrich Bergmann, Ursina Schaede, Dora Simon, Carlo Zanella & Christian Zuend 2019 Foundations edition , by Lachlan Deer & Julian Langer 2020 edition , by Ulrich Bergmann, Matteo Courthoud & Lachlan Deer 2021 edition , by Lachlan Deer, Julian Langer, Lexi Schubert & Martin Stancsics","title":"Previous Versions of the Installation Guide"},{"location":"updates/#major-changes","text":"","title":"Major Changes"},{"location":"updates/#v2022","text":"Switch from the Anaconda to Miniforge to have a leaner Python distribution Use a separated conda environment for the course instead of the base environment Switch from vcxsrv to GWSL as it's more user-friendly Obtain Chromedriver through chromedriver_autoinstaller","title":"v2022"},{"location":"updates/#v202101","text":"Update package versions for all Operating Systems Mac instructions using zsh rather than bash WSL instructions compliant with WSL2 Uses Google Chrome and Chromedriver from WSL for webscraping via an xserver","title":"v2021.0.1"},{"location":"updates/#v2020","text":"Migrate from Cygwin to Windows Subsystem for Linux Higher dependency on Homebrew to install packages for Mac Emphasis on installation using terminal commands rather than graphical installers to enhance reproducibility Remove GIS guide Split's installation instructions of R, RStudio and additional R packaged into separate versions","title":"v2020"},{"location":"updates/#2019-foundations-edition","text":"Focus only on R, terminal, Git and snakemake","title":"2019 Foundations edition"},{"location":"webscraping_drivers/","text":"Web Scraping Using an Automated Browser Sometimes when we scrape the web, we need to automate our computer to open a web browser to gather information from each page. This is especially true when the site we want to scrape has content that is loaded dynamically with javascript. We will solve this by installing Google Chrome and using a tool called Chromedriver. The former has to be installed manually, but the latter will be handled by a very handy Python package we have already installed ( chromedriver-autoinstaller ). Installing this stuff is operating system specific, hence so are the instructions below. Mac Users We need an up to date version of the web browser Google Chrome. We will install it via Homebrew. Enter the following into the terminal and hit Return : brew install --cask google-chrome Verify the install: google-chrome --version which should yield output similar to: Google Chrome 103.0.5060.53 Windows and Linux Users We need an up to date version of Google Chrome and some additional linux packages. First add the additional linux packages by entering the following into the terminal: sudo apt-get install libxss1 libappindicator1 libindicator7 Now let's download the latest stable version of Google Chrome using the terminal: wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb And now install it: sudo dpkg -i google-chrome*.deb sudo apt-get install -f Verify the install: google-chrome --version which should yield output similar to: Google Chrome 103.0.5060.53 Additional Steps for Windows 10 Users We will Google Chrome to be able to \"pop out\" of our Ubuntu installation so that we can see it visually. Here's how we can make that happen: Note Windows 11 can handle GUI apps under WSL by default. This section is only relevant form Windows 10 users. Install GWSL on Windows. It's easiest to get it through the Windows Store. Install the x11 client inside our Ubuntu installation. Type the following into the terminal: sudo apt install x11-apps -y Enable display and audio exporting in GWSL Start GWSL from the Start menu Click on its icon on the taskbar Select GWSL distro tools Select Display/Audio Auto-exporting Restart Ubuntu if prompted Caution As you are told by GWSL, you will need to allow GWSL through the firewall both on public and private networks. Be sure to check all boxes when prompted by Windows Firewall. If you miss this step, follow the guide here . Finally, let's test if these steps worked. Open an Ubuntu terminal, and type google-chrome A linuxy looking Google Chrome should open in a new window.","title":"Webscraping"},{"location":"webscraping_drivers/#web-scraping-using-an-automated-browser","text":"Sometimes when we scrape the web, we need to automate our computer to open a web browser to gather information from each page. This is especially true when the site we want to scrape has content that is loaded dynamically with javascript. We will solve this by installing Google Chrome and using a tool called Chromedriver. The former has to be installed manually, but the latter will be handled by a very handy Python package we have already installed ( chromedriver-autoinstaller ). Installing this stuff is operating system specific, hence so are the instructions below.","title":"Web Scraping Using an Automated Browser"},{"location":"webscraping_drivers/#mac-users","text":"We need an up to date version of the web browser Google Chrome. We will install it via Homebrew. Enter the following into the terminal and hit Return : brew install --cask google-chrome Verify the install: google-chrome --version which should yield output similar to: Google Chrome 103.0.5060.53","title":"Mac Users"},{"location":"webscraping_drivers/#windows-and-linux-users","text":"We need an up to date version of Google Chrome and some additional linux packages. First add the additional linux packages by entering the following into the terminal: sudo apt-get install libxss1 libappindicator1 libindicator7 Now let's download the latest stable version of Google Chrome using the terminal: wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb And now install it: sudo dpkg -i google-chrome*.deb sudo apt-get install -f Verify the install: google-chrome --version which should yield output similar to: Google Chrome 103.0.5060.53","title":"Windows and Linux Users"},{"location":"webscraping_drivers/#additional-steps-for-windows-10-users","text":"We will Google Chrome to be able to \"pop out\" of our Ubuntu installation so that we can see it visually. Here's how we can make that happen: Note Windows 11 can handle GUI apps under WSL by default. This section is only relevant form Windows 10 users. Install GWSL on Windows. It's easiest to get it through the Windows Store. Install the x11 client inside our Ubuntu installation. Type the following into the terminal: sudo apt install x11-apps -y Enable display and audio exporting in GWSL Start GWSL from the Start menu Click on its icon on the taskbar Select GWSL distro tools Select Display/Audio Auto-exporting Restart Ubuntu if prompted Caution As you are told by GWSL, you will need to allow GWSL through the firewall both on public and private networks. Be sure to check all boxes when prompted by Windows Firewall. If you miss this step, follow the guide here . Finally, let's test if these steps worked. Open an Ubuntu terminal, and type google-chrome A linuxy looking Google Chrome should open in a new window.","title":"Additional Steps for Windows 10 Users"},{"location":"windows-wsl/","text":"Windows Subsystem For Linux Windows Users Only! This page is only for those who are using Windows. Those with Mac or Linux operating systems can proceed to 'Command Line Tools.' Windows Subsystem for Linux (WSL) is a feature in Windows 10/11 that enables you to use Linux command-line tools on your Windows system. By installing this feature, everyone in the course will be able to run the same commands, and get the same output - an essential aspect of reproducibility. We hope that you will continue to use the WSL features we introduce over the next three weeks after the course is over for your own research related computing. The process for installing everything we need here is quite order dependent - follow the steps in the order they appear below. Want More Information? For more information about the Windows Subsystem for Linux, look here . Up to Date Windows 10/11 Required! To go further with this Installation Guide you need to have an up to date installation of Windows 10. IT Services in the Econ Department have assured us, if you update Windows to the latest version in your UZH laptop everything that follows will work. If you do not have a Windows 10 machine, Contact us! Install the Windows Subsystem for Linux Join the Windows Insider Program here Check that you have a recent build of Windows 10 (Build 19041 or above) Open up the run command with the Win + R key combo Type winver into the run command text box and hit OK . You should now see a dialogue screen with a OS build number. If the build number is older than 19041, update your windows to a later build. Open PowerShell as an administrator and type wsl --install The --install command performs the following actions: Enables the optional WSL and Virtual Machine Platform components Downloads and installs the latest Linux kernel Sets WSL 2 as the default Downloads and installs the Ubuntu Linux distribution (reboot may be required) You will likely be asked to restart your machine during this installation process. If you get error messages, you can check the troubleshooting pages . This can be a little daunting, come see us if you need in person help. WSL installation issues When we were trying this ourselves using Windows laptops provided by the University of Zurich we frequently got error messages saying the installation could not continue followed by an error code. The missing piece is a need to change a setting in the BIOS . Changing the 'Intel Virtualization Technology' setting to 'Enabled' fixed it for us. If you don't feel comfortable making this kind of BIOS change yourself, we'll help you if you come and see us. Set up your Linux user info Once the install is complete: Open the distribution using the start menu. You will be asked to create a username and password. Do so, and press Enter after each step. You might not see anything change as you type the password, that's OK -- it is recording what you write. Update and Upgrade your packages. In the shell that is open, use the command: sudo apt update && sudo apt upgrade Set up Windows Terminal Windows Terminal is our preferred terminal for Windows. Open the Microsoft Store Search for Windows Terminal Choose the first option - either Windows Terminal or Windows Terminal (Preview) Install it by clicking 'Get' Once installed, you will see it under 'Recently Added' in the Windows menu Open Windows Terminal To get access to your Ubuntu system, click the down arrow in the menu bar Select Ubuntu-xx.xx, and your Ubuntu terminal will open The Way Forward As you proceed through the remainder of the Installation Guide, you will generally follow the steps for 'Linux Users' and enter the commands into the Ubuntu Terminal we just installed. Occasionally there will be differences between Linux and Windows steps - these will be clearly marked by a separate header 'Windows Users.'","title":"Windows Subsystem"},{"location":"windows-wsl/#windows-subsystem-for-linux","text":"Windows Users Only! This page is only for those who are using Windows. Those with Mac or Linux operating systems can proceed to 'Command Line Tools.' Windows Subsystem for Linux (WSL) is a feature in Windows 10/11 that enables you to use Linux command-line tools on your Windows system. By installing this feature, everyone in the course will be able to run the same commands, and get the same output - an essential aspect of reproducibility. We hope that you will continue to use the WSL features we introduce over the next three weeks after the course is over for your own research related computing. The process for installing everything we need here is quite order dependent - follow the steps in the order they appear below. Want More Information? For more information about the Windows Subsystem for Linux, look here . Up to Date Windows 10/11 Required! To go further with this Installation Guide you need to have an up to date installation of Windows 10. IT Services in the Econ Department have assured us, if you update Windows to the latest version in your UZH laptop everything that follows will work. If you do not have a Windows 10 machine, Contact us!","title":"Windows Subsystem For Linux"},{"location":"windows-wsl/#install-the-windows-subsystem-for-linux","text":"Join the Windows Insider Program here Check that you have a recent build of Windows 10 (Build 19041 or above) Open up the run command with the Win + R key combo Type winver into the run command text box and hit OK . You should now see a dialogue screen with a OS build number. If the build number is older than 19041, update your windows to a later build. Open PowerShell as an administrator and type wsl --install The --install command performs the following actions: Enables the optional WSL and Virtual Machine Platform components Downloads and installs the latest Linux kernel Sets WSL 2 as the default Downloads and installs the Ubuntu Linux distribution (reboot may be required) You will likely be asked to restart your machine during this installation process. If you get error messages, you can check the troubleshooting pages . This can be a little daunting, come see us if you need in person help. WSL installation issues When we were trying this ourselves using Windows laptops provided by the University of Zurich we frequently got error messages saying the installation could not continue followed by an error code. The missing piece is a need to change a setting in the BIOS . Changing the 'Intel Virtualization Technology' setting to 'Enabled' fixed it for us. If you don't feel comfortable making this kind of BIOS change yourself, we'll help you if you come and see us.","title":"Install the Windows Subsystem for Linux"},{"location":"windows-wsl/#set-up-your-linux-user-info","text":"Once the install is complete: Open the distribution using the start menu. You will be asked to create a username and password. Do so, and press Enter after each step. You might not see anything change as you type the password, that's OK -- it is recording what you write. Update and Upgrade your packages. In the shell that is open, use the command: sudo apt update && sudo apt upgrade","title":"Set up your Linux user info"},{"location":"windows-wsl/#set-up-windows-terminal","text":"Windows Terminal is our preferred terminal for Windows. Open the Microsoft Store Search for Windows Terminal Choose the first option - either Windows Terminal or Windows Terminal (Preview) Install it by clicking 'Get' Once installed, you will see it under 'Recently Added' in the Windows menu Open Windows Terminal To get access to your Ubuntu system, click the down arrow in the menu bar Select Ubuntu-xx.xx, and your Ubuntu terminal will open","title":"Set up Windows Terminal"},{"location":"windows-wsl/#the-way-forward","text":"As you proceed through the remainder of the Installation Guide, you will generally follow the steps for 'Linux Users' and enter the commands into the Ubuntu Terminal we just installed. Occasionally there will be differences between Linux and Windows steps - these will be clearly marked by a separate header 'Windows Users.'","title":"The Way Forward"}]}